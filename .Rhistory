distinct()
d2 <- d %>%
pivot_longer(4:16, names_to = "Names", values_to = "Values") %>%
separate(Names, into = c("Type", "Depth"), sep = 1) %>%
pivot_wider(names_from = Type, values_from = Values)
d3 <- d2 %>%
mutate(Sensor = case_when(
Sensor == 1 ~ "Inner",
Sensor == 2 ~ "Outer",
Sensor == 3 ~ "Inner",
Sensor == 4 ~ "Outer"
)) %>%
rename("Moisture" = "M", "Temperature" = "T")
write_csv(d3, file.path("Soil_data_L2", str_c(i, "_GP_L2.csv")))
}
View(sensor.key)
sensor.key <- read_excel(file.path("Soil_data_supporting",
"Sensor_key_Install2.xlsx")) %>%
mutate(SensorID = as.character(SensorID))
View(sensor.key)
sensor.key <- read_excel(file.path("Soil_data_supporting",
"Sensor_key_Install2.xlsx")) %>%
mutate(SensorID = as.character(SensorID))
View(sensor.key)
filenames.L1 <- list.files("Soil_data_L1", pattern = ".csv", full.names = T)
tree.vec <- full.tree.vec
sensor.key <- read_excel(file.path("Soil_data_supporting",
"Sensor_key_Install2.xlsx")) %>%
mutate(SensorID = as.character(SensorID))
i <- tree.vec[1]
filenames.sub <- filenames.L1[which(str_detect(filenames.L1, i) == T)]
sensor.key2 <- sensor.key %>%
filter(TreeID == i)
View(sensor.key2)
sensor.key2 <- sensor.key %>%
filter(TreeID == i) %>%
select(Sensor, Location)
View(sensor.key2)
d <- lapply(filenames.sub, read_csv) %>%
bind_rows() %>%
distinct() %>%
left_join(sensor.key2, by = "Sensor")
View(d)
View(d)
d <- lapply(filenames.sub, read_csv) %>%
bind_rows() %>%
distinct() %>%
left_join(sensor.key2, by = "Sensor") %>%
select(-Sensor) %>%
select(Tree = TreeID, Location, Timestamp, everything())
d2 <- d %>%
pivot_longer(4:16, names_to = "Names", values_to = "Values") %>%
separate(Names, into = c("Type", "Depth"), sep = 1) %>%
pivot_wider(names_from = Type, values_from = Values)
d2 <- d %>%
pivot_longer(4:16, names_to = "Names", values_to = "Values") %>%
separate(Names, into = c("Type", "Depth"), sep = 1) %>%
pivot_wider(names_from = Type, values_from = Values) %>%
rename("Moisture" = "M", "Temperature" = "T")
View(d2)
for(i in tree.vec){
filenames.sub <- filenames.L1[which(str_detect(filenames.L1, i) == T)]
sensor.key2 <- sensor.key %>%
filter(TreeID == i) %>%
select(Sensor, Location)
d <- lapply(filenames.sub, read_csv) %>%
bind_rows() %>%
distinct() %>%
left_join(sensor.key2, by = "Sensor") %>%
select(-Sensor) %>%
select(Tree = TreeID, Location, Timestamp, everything())
d2 <- d %>%
pivot_longer(4:16, names_to = "Names", values_to = "Values") %>%
separate(Names, into = c("Type", "Depth"), sep = 1) %>%
pivot_wider(names_from = Type, values_from = Values) %>%
rename("Moisture" = "M", "Temperature" = "T")
write_csv(d2, file.path("Soil_data_L2", str_c(i, "_GP_L2.csv")))
}
d <- read_csv("Soil_data_L2/FB8_GP_L2.csv")
View(d)
library(needs)
needs(shiny, tidyverse, lubridate)
needs(readxl)
options(readr.show_col_types = FALSE)
ui <- fluidPage(
titlePanel("Gropoint data portal"),
sidebarLayout(
sidebarPanel(
sliderInput("dates",
label = h4("Select date range"),
min = as_date("2023-06-11"),
max = as_date(Sys.time()),
value = c(as_date("2023-06-11"), as_date(Sys.time()))),
fluidRow(
column(5,
radioButtons("Tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(7,
fluidRow(
radioButtons("Depth",
label = h4("Select Depth"),
choices = c("M1", "M2", "M3", "M4",
"M5", "M6"),
selected = "M1")),
fluidRow(
radioButtons("Location",
label = h4("Select Location"),
choices = c("Innter", "Outer"),
selected = "Inner")),
fluidRow(
radioButtons("Variable",
label = h4("Select Variable"),
choices = c("Moisture", "Temperature"),
selected = "Moisture")))),
downloadButton("downloadData", "Download")
),
# mainPanel(plotOutput("plot"))
mainPanel(
"Graph shows data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1"))
# , width = p.width, height = p1.height))
# ,
# plotOutput("plot2", width = p.width))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Soil_data_L2", str_c(input$Tree, "_GP_L2.csv")))
})
dataInput2 <- reactive({
dataInput() %>%
filter(Location == input$Location) %>%
filter(Timestamp >= as.POSIXct(input$dates[1], tz = "UTC")  &
Timestamp <= as.POSIXct(input$dates[2], tz = "UTC")) %>%
select(Tree, Location, Timestamp, Depth, Measure = input$Variable)
})
output$plot1 <- renderPlot({
ggplot(dataInput2()) +
# geom_line(aes(x = Timestamp, y = Moisture, group = grp)) +
geom_line(aes(x = Timestamp, y = Measure)) +
# labs(y = "Percent") +
theme_bw() +
# scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                             as.POSIXct(input$dates[2], tz = "UTC"))) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$Tree, "_", input$Location, "_", input$Variable)) +
facet_wrap(~Depth, ncol = 1)})
# ,
# width = p.width, height = p1.height)
# output$plot2 <- renderPlot({
#   ggplot(dataInput() %>%
#            filter(Depth == input$Depth)) +
#     geom_line(aes(x = Timestamp, y = Moisture)) +
#     labs(y = "Percent") +
#     theme_bw() +
#     scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                                 as.POSIXct(input$dates[2], tz = "UTC"))) +
#     theme(axis.title.x = element_blank(),
#           axis.text.x = element_text(size = 18),
#           axis.title.y = element_text(size = 20),
#           axis.text.y = element_text(size = 18),
#           plot.title = element_text(size = 24)) +
#     ggtitle(str_c(input$Tree, "_", input$Sensor, "_", input$Depth))},
#   width = p.width)
output$maxdate.output <- renderText({
as.character(max(dataInput2()$Timestamp, na.rm = T))
})
# output$plot3 <- renderPlot({
#   ggplot(precipInput()) +
#     geom_line(aes(x = Timestamp, y = Precipitation)) +
#     labs(y = "mm") +
#     theme_bw() +
#     scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                                 as.POSIXct(input$dates[2], tz = "UTC"))) +
#     theme(axis.title.x = element_blank(),
#           axis.text.x = element_text(size = 18),
#           axis.title.y = element_text(size = 20),
#           axis.text.y = element_text(size = 18),
#           plot.title = element_text(size = 24)) +
#     ggtitle("Precipitation")},
#   width = p.width)
# output$downloadData <- downloadHandler(
#   filename = function() {
#     str_c(str_c(input$Tree, input$Depth, input$dates[1], input$dates[2], sep = "_"),
#           ".csv")
#   },
#   content = function(file) {
#     write_csv(dataInput(), file)
#   })
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Gropoint data portal"),
sidebarLayout(
sidebarPanel(
sliderInput("dates",
label = h4("Select date range"),
min = as_date("2023-06-11"),
max = as_date(Sys.time()),
value = c(as_date("2023-06-11"), as_date(Sys.time()))),
fluidRow(
column(5,
radioButtons("Tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(7,
fluidRow(
radioButtons("Depth",
label = h4("Select Depth"),
choices = c("1", "2", "3", "4",
"5", "6", "7"),
selected = "1")),
fluidRow(
radioButtons("Location",
label = h4("Select Location"),
choices = c("Inner", "Outer"),
selected = "Inner")),
fluidRow(
radioButtons("Variable",
label = h4("Select Variable"),
choices = c("Moisture", "Temperature"),
selected = "Moisture")))),
downloadButton("downloadData", "Download")
),
# mainPanel(plotOutput("plot"))
mainPanel(
"Graph shows data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1"))
# , width = p.width, height = p1.height))
# ,
# plotOutput("plot2", width = p.width))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Soil_data_L2", str_c(input$Tree, "_GP_L2.csv")))
})
dataInput2 <- reactive({
dataInput() %>%
filter(Location == input$Location) %>%
filter(Timestamp >= as.POSIXct(input$dates[1], tz = "UTC")  &
Timestamp <= as.POSIXct(input$dates[2], tz = "UTC")) %>%
select(Tree, Location, Timestamp, Depth, Measure = input$Variable)
})
output$plot1 <- renderPlot({
ggplot(dataInput2()) +
# geom_line(aes(x = Timestamp, y = Moisture, group = grp)) +
geom_line(aes(x = Timestamp, y = Measure)) +
# labs(y = "Percent") +
theme_bw() +
# scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                             as.POSIXct(input$dates[2], tz = "UTC"))) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$Tree, "_", input$Location, "_", input$Variable)) +
facet_wrap(~Depth, ncol = 1)})
# ,
# width = p.width, height = p1.height)
# output$plot2 <- renderPlot({
#   ggplot(dataInput() %>%
#            filter(Depth == input$Depth)) +
#     geom_line(aes(x = Timestamp, y = Moisture)) +
#     labs(y = "Percent") +
#     theme_bw() +
#     scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                                 as.POSIXct(input$dates[2], tz = "UTC"))) +
#     theme(axis.title.x = element_blank(),
#           axis.text.x = element_text(size = 18),
#           axis.title.y = element_text(size = 20),
#           axis.text.y = element_text(size = 18),
#           plot.title = element_text(size = 24)) +
#     ggtitle(str_c(input$Tree, "_", input$Sensor, "_", input$Depth))},
#   width = p.width)
output$maxdate.output <- renderText({
as.character(max(dataInput2()$Timestamp, na.rm = T))
})
# output$plot3 <- renderPlot({
#   ggplot(precipInput()) +
#     geom_line(aes(x = Timestamp, y = Precipitation)) +
#     labs(y = "mm") +
#     theme_bw() +
#     scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                                 as.POSIXct(input$dates[2], tz = "UTC"))) +
#     theme(axis.title.x = element_blank(),
#           axis.text.x = element_text(size = 18),
#           axis.title.y = element_text(size = 20),
#           axis.text.y = element_text(size = 18),
#           plot.title = element_text(size = 24)) +
#     ggtitle("Precipitation")},
#   width = p.width)
# output$downloadData <- downloadHandler(
#   filename = function() {
#     str_c(str_c(input$Tree, input$Depth, input$dates[1], input$dates[2], sep = "_"),
#           ".csv")
#   },
#   content = function(file) {
#     write_csv(dataInput(), file)
#   })
}
shinyApp(ui, server)
p.width <- 900
p1.height <- 700
ui <- fluidPage(
titlePanel("Gropoint data portal"),
sidebarLayout(
sidebarPanel(
sliderInput("dates",
label = h4("Select date range"),
min = as_date("2023-06-11"),
max = as_date(Sys.time()),
value = c(as_date("2023-06-11"), as_date(Sys.time()))),
fluidRow(
column(5,
radioButtons("Tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(7,
fluidRow(
radioButtons("Depth",
label = h4("Select Depth"),
choices = c("1", "2", "3", "4",
"5", "6", "7"),
selected = "1")),
fluidRow(
radioButtons("Location",
label = h4("Select Location"),
choices = c("Inner", "Outer"),
selected = "Inner")),
fluidRow(
radioButtons("Variable",
label = h4("Select Variable"),
choices = c("Moisture", "Temperature"),
selected = "Moisture")))),
downloadButton("downloadData", "Download")
),
# mainPanel(plotOutput("plot"))
mainPanel(
"Graph shows data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1", width = p.width, height = p1.height))
# , width = p.width, height = p1.height))
# ,
# plotOutput("plot2", width = p.width))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Soil_data_L2", str_c(input$Tree, "_GP_L2.csv")))
})
dataInput2 <- reactive({
dataInput() %>%
filter(Location == input$Location) %>%
filter(Timestamp >= as.POSIXct(input$dates[1], tz = "UTC")  &
Timestamp <= as.POSIXct(input$dates[2], tz = "UTC")) %>%
select(Tree, Location, Timestamp, Depth, Measure = input$Variable)
})
output$plot1 <- renderPlot({
ggplot(dataInput2()) +
# geom_line(aes(x = Timestamp, y = Moisture, group = grp)) +
geom_line(aes(x = Timestamp, y = Measure)) +
# labs(y = "Percent") +
theme_bw() +
# scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                             as.POSIXct(input$dates[2], tz = "UTC"))) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$Tree, "_", input$Location, "_", input$Variable)) +
facet_wrap(~Depth, ncol = 1)})
# ,
# width = p.width, height = p1.height)
# output$plot2 <- renderPlot({
#   ggplot(dataInput() %>%
#            filter(Depth == input$Depth)) +
#     geom_line(aes(x = Timestamp, y = Moisture)) +
#     labs(y = "Percent") +
#     theme_bw() +
#     scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                                 as.POSIXct(input$dates[2], tz = "UTC"))) +
#     theme(axis.title.x = element_blank(),
#           axis.text.x = element_text(size = 18),
#           axis.title.y = element_text(size = 20),
#           axis.text.y = element_text(size = 18),
#           plot.title = element_text(size = 24)) +
#     ggtitle(str_c(input$Tree, "_", input$Sensor, "_", input$Depth))},
#   width = p.width)
output$maxdate.output <- renderText({
as.character(max(dataInput2()$Timestamp, na.rm = T))
})
# output$plot3 <- renderPlot({
#   ggplot(precipInput()) +
#     geom_line(aes(x = Timestamp, y = Precipitation)) +
#     labs(y = "mm") +
#     theme_bw() +
#     scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                                 as.POSIXct(input$dates[2], tz = "UTC"))) +
#     theme(axis.title.x = element_blank(),
#           axis.text.x = element_text(size = 18),
#           axis.title.y = element_text(size = 20),
#           axis.text.y = element_text(size = 18),
#           plot.title = element_text(size = 24)) +
#     ggtitle("Precipitation")},
#   width = p.width)
# output$downloadData <- downloadHandler(
#   filename = function() {
#     str_c(str_c(input$Tree, input$Depth, input$dates[1], input$dates[2], sep = "_"),
#           ".csv")
#   },
#   content = function(file) {
#     write_csv(dataInput(), file)
#   })
}
shinyApp(ui, server)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Soil_data_L2", str_c(input$Tree, "_GP_L2.csv")))
})
dataInput2 <- reactive({
dataInput() %>%
filter(Location == input$Location) %>%
filter(Timestamp >= as.POSIXct(input$dates[1], tz = "UTC")  &
Timestamp <= as.POSIXct(input$dates[2], tz = "UTC")) %>%
select(Tree, Location, Timestamp, Depth, Measure = input$Variable)
})
output$plot1 <- renderPlot({
ggplot(dataInput2()) +
# geom_line(aes(x = Timestamp, y = Moisture, group = grp)) +
geom_line(aes(x = Timestamp, y = Measure, color = factor(Depth))) +
# labs(y = "Percent") +
theme_bw() +
# scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                             as.POSIXct(input$dates[2], tz = "UTC"))) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$Tree, "_", input$Location, "_", input$Variable))
})
# +
#   facet_wrap(~Depth, ncol = 1)
# ,
# width = p.width, height = p1.height)
# output$plot2 <- renderPlot({
#   ggplot(dataInput() %>%
#            filter(Depth == input$Depth)) +
#     geom_line(aes(x = Timestamp, y = Moisture)) +
#     labs(y = "Percent") +
#     theme_bw() +
#     scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                                 as.POSIXct(input$dates[2], tz = "UTC"))) +
#     theme(axis.title.x = element_blank(),
#           axis.text.x = element_text(size = 18),
#           axis.title.y = element_text(size = 20),
#           axis.text.y = element_text(size = 18),
#           plot.title = element_text(size = 24)) +
#     ggtitle(str_c(input$Tree, "_", input$Sensor, "_", input$Depth))},
#   width = p.width)
output$maxdate.output <- renderText({
as.character(max(dataInput2()$Timestamp, na.rm = T))
})
# output$plot3 <- renderPlot({
#   ggplot(precipInput()) +
#     geom_line(aes(x = Timestamp, y = Precipitation)) +
#     labs(y = "mm") +
#     theme_bw() +
#     scale_x_datetime(limits = c(as.POSIXct(input$dates[1], tz = "UTC"),
#                                 as.POSIXct(input$dates[2], tz = "UTC"))) +
#     theme(axis.title.x = element_blank(),
#           axis.text.x = element_text(size = 18),
#           axis.title.y = element_text(size = 20),
#           axis.text.y = element_text(size = 18),
#           plot.title = element_text(size = 24)) +
#     ggtitle("Precipitation")},
#   width = p.width)
# output$downloadData <- downloadHandler(
#   filename = function() {
#     str_c(str_c(input$Tree, input$Depth, input$dates[1], input$dates[2], sep = "_"),
#           ".csv")
#   },
#   content = function(file) {
#     write_csv(dataInput(), file)
#   })
}
shinyApp(ui, server)
