str_c(unique(d$TreeID), unique(d$Sensor),
"GP_L1", sep = "_")))
write_csv(d, str_c(out, ".csv"))
} else{
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
if(new.data.starts <= (data.needed.starting + hours(2)) &
new.data.ends > data.needed.starting){
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
print(str_c("Imported from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts > data.needed.starting){
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
print(str_c("Problem: data gap: ",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts <= data.needed.starting &
new.data.ends <= data.needed.starting) {
print(str_c("No import needed from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
}
}
filenames.L1 <- list.files("Soil_data_L1", pattern = ".csv", full.names = T)
tree.vec <- full.tree.vec
sensor.key <- read_excel(file.path("Soil_data_supporting",
"Sensor_key_Install2.xlsx")) %>%
mutate(SensorID = as.character(SensorID))
# i <- tree.vec[1]
for(i in tree.vec){
filenames.sub <- filenames.L1[which(str_detect(filenames.L1, i) == T)]
sensor.key2 <- sensor.key %>%
filter(TreeID == i) %>%
select(Sensor, Location)
d <- lapply(filenames.sub, read_csv) %>%
bind_rows() %>%
distinct() %>%
left_join(sensor.key2, by = "Sensor") %>%
select(-Sensor) %>%
select(Tree = TreeID, Location, Timestamp, everything())
d2 <- d %>%
pivot_longer(4:16, names_to = "Names", values_to = "Values") %>%
separate(Names, into = c("Type", "Depth"), sep = 1) %>%
pivot_wider(names_from = Type, values_from = Values) %>%
rename("Moisture" = "M", "Temperature" = "T")
write_csv(d2, file.path("Soil_data_L2", str_c(i, "_GP_L2.csv")))
}
library(needs)
needs(shiny, tidyverse, lubridate)
options(readr.show_col_types = FALSE)
source("app_functions_soil.R")
p.width <- 900
p1.height <- 700
ui <- fluidPage(
titlePanel("Gropoint data portal"),
sidebarLayout(
sidebarPanel(
sliderInput("daterange",
label = h4("Select date range"),
min = as_date("2023-06-11"),
max = as_date(Sys.time()),
value = c(as_date("2023-06-11"), as_date(Sys.time()))),
fluidRow(
column(3,
radioButtons("fixed.y",
label = h4("Fix y-axis?"),
choices = c("Yes", "No"),
selected = "No")),
column(9,
sliderInput("yrange",
label = h4("Select y-axis range"),
min = 0,
max = 100,
value = c(0, 100)))),
fluidRow(
column(5,
radioButtons("Tree.view",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(7,
fluidRow(
checkboxGroupInput("Depth.view",
label = h4("Select Depth"),
choices = c("1", "2", "3", "4",
"5", "6", "7"),
selected = c("1", "2", "3", "4", "5", "6", "7"))),
fluidRow(
radioButtons("Location.view",
label = h4("Select Location"),
choices = c("Inner", "Outer"),
selected = "Inner")),
fluidRow(
radioButtons("Variable.view",
label = h4("Select Variable"),
choices = c("Moisture", "Temperature"),
selected = "Moisture")),
fluidRow(
radioButtons("Time.res",
label = h4("Select time resolution"),
choices = c("Hourly", "Daily", "Weekly"),
selected = "Hourly")))),
titlePanel("Download options"),
radioButtons("Time_format",
label = h4("Select time format"),
choices = list("ISO", "Excel_ready"),
selected = "ISO"),
downloadButton("downloadData", "Download")
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",
"Graph shows data until:",
verbatimTextOutput("max.date.out"),
plotOutput("plot", width = p.width, height = p1.height,
click = "plot_click",
brush = "plot_brush"),
verbatimTextOutput("plot_clickinfo"),
plotOutput("plot_brushedpoints")),
tabPanel("Data", tableOutput("data1"), tableOutput("data2")),
tabPanel("Summary", tableOutput("summary"))))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Soil_data_L2", str_c(input$Tree.view, "_GP_L2.csv")))
})
dataInput2 <- reactive({
dataInput() %>%
filter(Location == input$Location.view) %>%
filter(Depth %in% input$Depth.view) %>%
filter(Timestamp >= as.POSIXct(input$daterange[1], tz = "UTC")  &
Timestamp <= as.POSIXct(input$daterange[2], tz = "UTC")) %>%
pivot_longer(5:6, names_to = "M.or.T", values_to = "Measure") %>%
filter(M.or.T == input$Variable.view)
})
dataInput3 <- reactive({
if(input$Time.res == "Hourly"){
dataInput2()
} else if(input$Time.res == "Daily"){
dataInput2() %>%
group_by(Tree, Location, Depth, M.or.T, Timestamp = floor_date(Timestamp, "day")) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()
} else if(input$Time.res == "Weekly"){
dataInput2() %>%
group_by(Tree, Location, Depth, M.or.T, Timestamp = floor_date(Timestamp, "week")) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()}
})
## Plots ------------------------------------------------------------------
output$max.date.out <- renderText({
as.character(max(dataInput3()$Timestamp, na.rm = T))
})
output$plot <- renderPlot({
p <- ggplot(dataInput3()) +
geom_line(aes(x = Timestamp, y = Measure, color = factor(Depth))) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
labs(color = "Depth") +
ggtitle(str_c(input$Tree.view, "_", input$Location.view, "_", input$Variable.view))
if(input$fixed.y == "Yes"){
p <- p +
ylim(input$yrange[1], input$yrange[2])
}
p
})
output$plot_clickinfo <- renderPrint({
val <- nearPoints(dataInput2(), input$plot_click, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput2(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Measure, color = factor(Depth))) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24))
})
## Data and summaries ------------------------------------------------------
data.for.summaries <- reactive({
dataInput2() %>%
mutate(Timestamp = as.character(Timestamp))
})
output$data1 <- renderTable({
head(data.for.summaries())
})
output$data2 <- renderTable({
tail(data.for.summaries())
})
output$summary <- renderTable({
summarise_soil(data.for.summaries())
})
## Download data options --------------------------------------------------------
data.for.download <- reactive({
if(input$Time_format == "ISO"){
dataInput3()
} else if(input$Time_format == "Excel_ready"){
dataInput3() %>%
mutate(Timestamp = as.character(Timestamp))
}
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$Tree.view, "Soil", input$Variable.view, input$Location.view,
str_sub(as.character(input$daterange[1]), start = 1, end = 10),
str_sub(as.character(input$daterange[2]), start = 1, end = 10),
sep = "_"),
".csv")
},
content = function(file) {
write_csv(data.for.download(), file)
})
}
shinyApp(ui, server)
library(needs)
needs(tidyverse, lubridate, readxl)
source("Soil_functions.R")
options(readr.show_col_types = FALSE)
# Data should be uploaded into a folder named by date of upload.
import_date <- "2024-05-28"
filenames.full <- list.files(file.path("Soil_data_raw", import_date),
full.names = T)
sensor.key <- read_excel(file.path("Soil_data_supporting",
"Sensor_key_Install2.xlsx")) %>%
mutate(SensorID = as.character(SensorID))
col.names.raw <- c("Timestamp", "Sensor", "M1", "M2", "M3", "M4", "M5", "M6",
"T1", "T2", "T3", "T4", "T5", "T6", "T7")
# If you get an error arising from missing data at the start of the file, open it and delete those rows manually
# i <- filenames.full[1]
for(i in filenames.full){
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
# If the L1 file doesn't exist, need to start it
if(file.exists(filename.in.L1) == F){
out <- str_c(file.path("Soil_data_L1",
str_c(unique(d$TreeID), unique(d$Sensor),
"GP_L1", sep = "_")))
write_csv(d, str_c(out, ".csv"))
} else{
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
if(new.data.starts <= (data.needed.starting + hours(2)) &
new.data.ends > data.needed.starting){
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
print(str_c("Imported from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts > data.needed.starting){
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
print(str_c("Problem: data gap: ",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts <= data.needed.starting &
new.data.ends <= data.needed.starting) {
print(str_c("No import needed from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
}
}
filenames.L1 <- list.files("Soil_data_L1", pattern = ".csv", full.names = T)
tree.vec <- full.tree.vec
sensor.key <- read_excel(file.path("Soil_data_supporting",
"Sensor_key_Install2.xlsx")) %>%
mutate(SensorID = as.character(SensorID))
# i <- tree.vec[1]
for(i in tree.vec){
filenames.sub <- filenames.L1[which(str_detect(filenames.L1, i) == T)]
sensor.key2 <- sensor.key %>%
filter(TreeID == i) %>%
select(Sensor, Location)
d <- lapply(filenames.sub, read_csv) %>%
bind_rows() %>%
distinct() %>%
left_join(sensor.key2, by = "Sensor") %>%
select(-Sensor) %>%
select(Tree = TreeID, Location, Timestamp, everything())
d2 <- d %>%
pivot_longer(4:16, names_to = "Names", values_to = "Values") %>%
separate(Names, into = c("Type", "Depth"), sep = 1) %>%
pivot_wider(names_from = Type, values_from = Values) %>%
rename("Moisture" = "M", "Temperature" = "T")
write_csv(d2, file.path("Soil_data_L2", str_c(i, "_GP_L2.csv")))
}
library(needs)
needs(shiny, tidyverse, lubridate)
options(readr.show_col_types = FALSE)
source("app_functions_soil.R")
p.width <- 900
p1.height <- 700
ui <- fluidPage(
titlePanel("Gropoint data portal"),
sidebarLayout(
sidebarPanel(
sliderInput("daterange",
label = h4("Select date range"),
min = as_date("2023-06-11"),
max = as_date(Sys.time()),
value = c(as_date("2023-06-11"), as_date(Sys.time()))),
fluidRow(
column(3,
radioButtons("fixed.y",
label = h4("Fix y-axis?"),
choices = c("Yes", "No"),
selected = "No")),
column(9,
sliderInput("yrange",
label = h4("Select y-axis range"),
min = 0,
max = 100,
value = c(0, 100)))),
fluidRow(
column(5,
radioButtons("Tree.view",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(7,
fluidRow(
checkboxGroupInput("Depth.view",
label = h4("Select Depth"),
choices = c("1", "2", "3", "4",
"5", "6", "7"),
selected = c("1", "2", "3", "4", "5", "6", "7"))),
fluidRow(
radioButtons("Location.view",
label = h4("Select Location"),
choices = c("Inner", "Outer"),
selected = "Inner")),
fluidRow(
radioButtons("Variable.view",
label = h4("Select Variable"),
choices = c("Moisture", "Temperature"),
selected = "Moisture")),
fluidRow(
radioButtons("Time.res",
label = h4("Select time resolution"),
choices = c("Hourly", "Daily", "Weekly"),
selected = "Hourly")))),
titlePanel("Download options"),
radioButtons("Time_format",
label = h4("Select time format"),
choices = list("ISO", "Excel_ready"),
selected = "ISO"),
downloadButton("downloadData", "Download")
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",
"Graph shows data until:",
verbatimTextOutput("max.date.out"),
plotOutput("plot", width = p.width, height = p1.height,
click = "plot_click",
brush = "plot_brush"),
verbatimTextOutput("plot_clickinfo"),
plotOutput("plot_brushedpoints")),
tabPanel("Data", tableOutput("data1"), tableOutput("data2")),
tabPanel("Summary", tableOutput("summary"))))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Soil_data_L2", str_c(input$Tree.view, "_GP_L2.csv")))
})
dataInput2 <- reactive({
dataInput() %>%
filter(Location == input$Location.view) %>%
filter(Depth %in% input$Depth.view) %>%
filter(Timestamp >= as.POSIXct(input$daterange[1], tz = "UTC")  &
Timestamp <= as.POSIXct(input$daterange[2], tz = "UTC")) %>%
pivot_longer(5:6, names_to = "M.or.T", values_to = "Measure") %>%
filter(M.or.T == input$Variable.view)
})
dataInput3 <- reactive({
if(input$Time.res == "Hourly"){
dataInput2()
} else if(input$Time.res == "Daily"){
dataInput2() %>%
group_by(Tree, Location, Depth, M.or.T, Timestamp = floor_date(Timestamp, "day")) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()
} else if(input$Time.res == "Weekly"){
dataInput2() %>%
group_by(Tree, Location, Depth, M.or.T, Timestamp = floor_date(Timestamp, "week")) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()}
})
## Plots ------------------------------------------------------------------
output$max.date.out <- renderText({
as.character(max(dataInput3()$Timestamp, na.rm = T))
})
output$plot <- renderPlot({
p <- ggplot(dataInput3()) +
geom_line(aes(x = Timestamp, y = Measure, color = factor(Depth))) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
labs(color = "Depth") +
ggtitle(str_c(input$Tree.view, "_", input$Location.view, "_", input$Variable.view))
if(input$fixed.y == "Yes"){
p <- p +
ylim(input$yrange[1], input$yrange[2])
}
p
})
output$plot_clickinfo <- renderPrint({
val <- nearPoints(dataInput2(), input$plot_click, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput2(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Measure, color = factor(Depth))) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24))
})
## Data and summaries ------------------------------------------------------
data.for.summaries <- reactive({
dataInput2() %>%
mutate(Timestamp = as.character(Timestamp))
})
output$data1 <- renderTable({
head(data.for.summaries())
})
output$data2 <- renderTable({
tail(data.for.summaries())
})
output$summary <- renderTable({
summarise_soil(data.for.summaries())
})
## Download data options --------------------------------------------------------
data.for.download <- reactive({
if(input$Time_format == "ISO"){
dataInput3()
} else if(input$Time_format == "Excel_ready"){
dataInput3() %>%
mutate(Timestamp = as.character(Timestamp))
}
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$Tree.view, "Soil", input$Variable.view, input$Location.view,
str_sub(as.character(input$daterange[1]), start = 1, end = 10),
str_sub(as.character(input$daterange[2]), start = 1, end = 10),
sep = "_"),
".csv")
},
content = function(file) {
write_csv(data.for.download(), file)
})
}
shinyApp(ui, server)
