sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
# If the L1 file doesn't exist, need to start it
if(file.exists(filename.in.L1) == F){
out <- str_c(file.path("Soil_data_L1",
str_c(unique(d$TreeID), unique(d$Sensor),
"GP_L1", sep = "_")))
write_csv(d, str_c(out, ".csv"))
} else{
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
if(new.data.starts <= (data.needed.starting + hours(2)) &
new.data.ends > data.needed.starting){
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
print(str_c("Imported from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts <= data.needed.starting &
new.data.ends <= data.needed.starting) {
print(str_c("No import needed from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts > data.needed.starting){
print(str_c("Problem: No import due to data gap: ",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))
}
}
}
# If you get an error arising from missing data at the start of the file, open it and delete those rows manually
i <- filenames.full[1]
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
library(needs)
needs(tidyverse, lubridate, readxl)
source("Soil_functions.R")
options(readr.show_col_types = FALSE)
# Data should be uploaded into a folder named by date of upload.
import_date <- "2024-01-04"
filenames.full <- list.files(file.path("Soil_data_raw", import_date),
full.names = T)
sensor.key <- read_excel(file.path("Soil_data_supporting",
"Sensor_key_Install2.xlsx")) %>%
mutate(SensorID = as.character(SensorID))
col.names.raw <- c("Timestamp", "Sensor", "M1", "M2", "M3", "M4", "M5", "M6",
"T1", "T2", "T3", "T4", "T5", "T6", "T7")
# If you get an error arising from missing data at the start of the file, open it and delete those rows manually
i <- filenames.full[1]
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
View(sensorkey.sub)
# New function
read_gropoint2 <- function(x){
suppressWarnings(
read_csv(x, col_names = col.names.raw, show_col_types = F) %>%
mutate(across(all_of(3:15), as.numeric))
) %>%
mutate(TreeID = unique(sensorkey.sub$TreeID),
Sensor = unique(sensorkey.sub$Sensor)) %>%
select(TreeID, Sensor, everything())
}
d <- read_gropoint2(i) %>%
distinct()
View(d)
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
for(i in filenames.full){
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
# If the L1 file doesn't exist, need to start it
if(file.exists(filename.in.L1) == F){
out <- str_c(file.path("Soil_data_L1",
str_c(unique(d$TreeID), unique(d$Sensor),
"GP_L1", sep = "_")))
write_csv(d, str_c(out, ".csv"))
} else{
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
if(new.data.starts <= (data.needed.starting + hours(2)) &
new.data.ends > data.needed.starting){
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
print(str_c("Imported from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts <= data.needed.starting &
new.data.ends <= data.needed.starting) {
print(str_c("No import needed from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts > data.needed.starting){
print(str_c("Problem: No import due to data gap: ",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))
}
}
}
filenames.full
# If you get an error arising from missing data at the start of the file, open it and delete those rows manually
i <- filenames.full[13]
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
filenames.full <- list.files(file.path("Soil_data_raw", import_date),
full.names = T)
# If you get an error arising from missing data at the start of the file, open it and delete those rows manually
i <- filenames.full[13]
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
View(d.append)
for(i in filenames.full){
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
# If the L1 file doesn't exist, need to start it
if(file.exists(filename.in.L1) == F){
out <- str_c(file.path("Soil_data_L1",
str_c(unique(d$TreeID), unique(d$Sensor),
"GP_L1", sep = "_")))
write_csv(d, str_c(out, ".csv"))
} else{
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
if(new.data.starts <= (data.needed.starting + hours(2)) &
new.data.ends > data.needed.starting){
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
print(str_c("Imported from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts <= data.needed.starting &
new.data.ends <= data.needed.starting) {
print(str_c("No import needed from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts > data.needed.starting){
print(str_c("Problem: No import due to data gap: ",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))
}
}
}
# If you get an error arising from missing data at the start of the file, open it and delete those rows manually
i <- filenames.full[13]
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
# If you get an error arising from missing data at the start of the file, open it and delete those rows manually
i <- filenames.full[14]
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
for(i in filenames.full){
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
# If the L1 file doesn't exist, need to start it
if(file.exists(filename.in.L1) == F){
out <- str_c(file.path("Soil_data_L1",
str_c(unique(d$TreeID), unique(d$Sensor),
"GP_L1", sep = "_")))
write_csv(d, str_c(out, ".csv"))
} else{
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
if(new.data.starts <= (data.needed.starting + hours(2)) &
new.data.ends > data.needed.starting){
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
print(str_c("Imported from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts <= data.needed.starting &
new.data.ends <= data.needed.starting) {
print(str_c("No import needed from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts > data.needed.starting){
print(str_c("Problem: No import due to data gap: ",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))
}
}
}
for(i in filenames.full){
sensorkey.sub <- sensor.key %>%
filter(SensorID == str_sub(i, start = -11, end = -6))
d <- read_gropoint2(i) %>%
distinct()
new.data.starts <- min(d$Timestamp)
new.data.ends <- max(d$Timestamp)
filename.in.L1 <- str_c("Soil_data_L1/",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1", ".csv")
# If the L1 file doesn't exist, need to start it
if(file.exists(filename.in.L1) == F){
out <- str_c(file.path("Soil_data_L1",
str_c(unique(d$TreeID), unique(d$Sensor),
"GP_L1", sep = "_")))
write_csv(d, str_c(out, ".csv"))
} else{
L1.data <- read_csv(filename.in.L1, show_col_types = F)
data.needed.starting <- max(L1.data$Timestamp)
if(new.data.starts <= (data.needed.starting + hours(2)) &
new.data.ends > data.needed.starting){
d.append <- read_gropoint2(i) %>%
filter(Timestamp > as.POSIXct(data.needed.starting, tz = "CST"))
new.L1 <- bind_rows(L1.data, d.append) %>%
distinct()
out <- str_c(file.path("Soil_data_L1",
str_c(unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor), "_GP_L1")))
write_csv(new.L1, str_c(out, ".csv"))
print(str_c("Imported from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts <= data.needed.starting &
new.data.ends <= data.needed.starting) {
print(str_c("No import needed from: ", unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))}
else if(new.data.starts > data.needed.starting){
print(str_c("Problem: No import due to data gap: ",
unique(sensorkey.sub$TreeID), "_",
unique(sensorkey.sub$Sensor)))
}
}
}
library(needs)
needs(shiny, tidyverse, lubridate)
options(readr.show_col_types = FALSE)
p.width <- 900
p1.height <- 700
ui <- fluidPage(
titlePanel("Gropoint data portal"),
sidebarLayout(
sidebarPanel(
sliderInput("dates",
label = h4("Select date range"),
min = as_date("2023-06-11"),
max = as_date(Sys.time()),
value = c(as_date("2023-06-11"), as_date(Sys.time()))),
fluidRow(
column(5,
radioButtons("Tree.view",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(7,
fluidRow(
checkboxGroupInput("Depth.view",
label = h4("Select Depth"),
choices = c("1", "2", "3", "4",
"5", "6", "7"),
selected = c("1", "2", "3", "4", "5", "6", "7"))),
fluidRow(
radioButtons("Location.view",
label = h4("Select Location"),
choices = c("Inner", "Outer"),
selected = "Inner")),
fluidRow(
radioButtons("Variable.view",
label = h4("Select Variable"),
choices = c("Moisture", "Temperature"),
selected = "Moisture")))),
downloadButton("downloadData", "Download")
),
mainPanel(
"Graph shows data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1", width = p.width, height = p1.height))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Soil_data_L2", str_c(input$Tree.view, "_GP_L2.csv")))
})
dataInput2 <- reactive({
dataInput() %>%
filter(Location == input$Location.view) %>%
filter(Depth %in% input$Depth.view) %>%
filter(Timestamp >= as.POSIXct(input$dates[1], tz = "UTC")  &
Timestamp <= as.POSIXct(input$dates[2], tz = "UTC")) %>%
pivot_longer(5:6, names_to = "M.or.T", values_to = "Measure") %>%
filter(M.or.T == input$Variable.view)
})
output$plot1 <- renderPlot({
ggplot(dataInput2()) +
geom_line(aes(x = Timestamp, y = Measure, color = factor(Depth))) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$Tree.view, "_", input$Location.view, "_", input$Variable.view))
})
output$maxdate.output <- renderText({
as.character(max(dataInput2()$Timestamp, na.rm = T))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$Tree.view, input$Variable.view, input$Location.view,
input$dates[1], input$dates[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput2(), file)
})
}
shinyApp(ui, server)
filenames.L1 <- list.files("Soil_data_L1", pattern = ".csv", full.names = T)
tree.vec <- full.tree.vec
sensor.key <- read_excel(file.path("Soil_data_supporting",
"Sensor_key_Install2.xlsx")) %>%
mutate(SensorID = as.character(SensorID))
for(i in tree.vec){
filenames.sub <- filenames.L1[which(str_detect(filenames.L1, i) == T)]
sensor.key2 <- sensor.key %>%
filter(TreeID == i) %>%
select(Sensor, Location)
d <- lapply(filenames.sub, read_csv) %>%
bind_rows() %>%
distinct() %>%
left_join(sensor.key2, by = "Sensor") %>%
select(-Sensor) %>%
select(Tree = TreeID, Location, Timestamp, everything())
d2 <- d %>%
pivot_longer(4:16, names_to = "Names", values_to = "Values") %>%
separate(Names, into = c("Type", "Depth"), sep = 1) %>%
pivot_wider(names_from = Type, values_from = Values) %>%
rename("Moisture" = "M", "Temperature" = "T")
write_csv(d2, file.path("Soil_data_L2", str_c(i, "_GP_L2.csv")))
}
ui <- fluidPage(
titlePanel("Gropoint data portal"),
sidebarLayout(
sidebarPanel(
sliderInput("dates",
label = h4("Select date range"),
min = as_date("2023-06-11"),
max = as_date(Sys.time()),
value = c(as_date("2023-06-11"), as_date(Sys.time()))),
fluidRow(
column(5,
radioButtons("Tree.view",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(7,
fluidRow(
checkboxGroupInput("Depth.view",
label = h4("Select Depth"),
choices = c("1", "2", "3", "4",
"5", "6", "7"),
selected = c("1", "2", "3", "4", "5", "6", "7"))),
fluidRow(
radioButtons("Location.view",
label = h4("Select Location"),
choices = c("Inner", "Outer"),
selected = "Inner")),
fluidRow(
radioButtons("Variable.view",
label = h4("Select Variable"),
choices = c("Moisture", "Temperature"),
selected = "Moisture")))),
downloadButton("downloadData", "Download")
),
mainPanel(
"Graph shows data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1", width = p.width, height = p1.height))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Soil_data_L2", str_c(input$Tree.view, "_GP_L2.csv")))
})
dataInput2 <- reactive({
dataInput() %>%
filter(Location == input$Location.view) %>%
filter(Depth %in% input$Depth.view) %>%
filter(Timestamp >= as.POSIXct(input$dates[1], tz = "UTC")  &
Timestamp <= as.POSIXct(input$dates[2], tz = "UTC")) %>%
pivot_longer(5:6, names_to = "M.or.T", values_to = "Measure") %>%
filter(M.or.T == input$Variable.view)
})
output$plot1 <- renderPlot({
ggplot(dataInput2()) +
geom_line(aes(x = Timestamp, y = Measure, color = factor(Depth))) +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$Tree.view, "_", input$Location.view, "_", input$Variable.view))
})
output$maxdate.output <- renderText({
as.character(max(dataInput2()$Timestamp, na.rm = T))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$Tree.view, input$Variable.view, input$Location.view,
input$dates[1], input$dates[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput2(), file)
})
}
shinyApp(ui, server)
